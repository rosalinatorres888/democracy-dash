import dash
from dash import dcc, html, Input, Output, State, callback
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.metrics import adjusted_rand_score
import os

# Initialize the app
app = dash.Dash(
    __name__,
    meta_tags=[{"name": "viewport", "content": "width=device-width, initial-scale=1"}],
    suppress_callback_exceptions=True
)

# Define color scheme
regime_colors = {
    'Full Democracy': '#4CAF50',
    'Flawed Democracy': '#2196F3',
    'Hybrid Regime': '#FFC107',
    'Authoritarian': '#F44336'
}

# Load the data
data_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'democracy_index_data.csv')
df = pd.read_csv(data_path)

# Create additional data structures needed for the dashboard
model_performance = pd.DataFrame({
    'Algorithm': ['Hierarchical Clustering', 'K-Means', 'Gaussian Mixture', 'DBSCAN'],
    'ARI': [0.78, 0.57, 0.52, 0.41],
    'Accuracy': [0.85, 0.73, 0.68, 0.58],
    'F1': [0.82, 0.69, 0.65, 0.55]
})

feature_importance = pd.DataFrame({
    'Feature': ['Electoral Process', 'Civil Liberties', 'Functioning of Government', 
                'Political Participation', 'Political Culture'],
    'Importance': [0.86, 0.90, 0.75, 0.64, 0.72]
})

# Create yearly trends data (sample data)
yearly_trends = {
    'Norway': [9.80, 9.87, 9.81, 9.81, 9.81, 9.81, 9.75, 9.81],
    'United States': [8.05, 7.98, 7.98, 7.96, 7.96, 7.92, 7.85, 7.85],
    'Hungary': [7.00, 6.84, 6.64, 6.63, 6.56, 6.50, 6.12, 6.12],
    'Poland': [7.09, 6.67, 6.67, 6.62, 6.57, 6.49, 6.09, 6.09],
    'Tunisia': [6.40, 6.31, 6.25, 6.41, 6.59, 6.72, 6.08, 6.08],
    'Mexico': [6.47, 6.41, 6.19, 6.09, 6.09, 6.07, 6.07, 6.07],
}
years = list(range(2017, 2025))

# Identify borderline countries
df['is_borderline'] = False
borderline_mask = (df['category'] == 'Flawed Democracy') & (df['democracy_index'] < 6.2)
df.loc[borderline_mask, 'is_borderline'] = True
borderline_countries = df[df['is_borderline']]['country'].tolist()

# App layout
app.layout = html.Div([
    # Header
    html.Div([
        html.H1("Democracy Index Clustering Analysis", className="header-title"),
        html.H2("Machine Learning Discovers Political Regime Patterns", className="header-subtitle"),
        html.Div([
            html.Div("By: Rosalina Torres, Northeastern University, MS Candidate, Data Analytics Engineering", 
                     className="header-author"),
            html.Div("Data: The Economist Intelligence Unit Democracy Index", 
                     className="header-data-source"),
        ], className="header-info"),
    ], className="header"),
    
    # Main dashboard grid
    html.Div([
        # Left column - Country Explorer
        html.Div([
            html.H3("Country Explorer", className="panel-title"),
            html.Div([
                html.Label("Select a country:", className="control-label"),
                dcc.Dropdown(
                    id='country-selector',
                    options=[{'label': f"{country} {' (Borderline)' if country in borderline_countries else ''}", 
                              'value': country}
                             for country in df['country'].sort_values()],
                    value='Norway',
                    className="dropdown"
                ),
            ], className="control-group"),
            
            html.Div(id="country-info", className="country-info-card"),
            
            dcc.Graph(id="radar-chart", className="chart-container"),
            
            html.Div([
                html.H4("Dimension Scores:", className="dimension-title"),
                html.Div(id="dimension-details", className="dimension-details")
            ], className="dimension-container"),
            
        ], className="panel country-panel"),
        
        # Middle column - Democracy Clustering
        html.Div([
            html.H3("Democracy Clustering", className="panel-title"),
            html.Div([
                html.Label([
                    dcc.Checklist(
                        id='show-clusters',
                        options=[{'label': 'Show Cluster Boundaries', 'value': 'show'}],
                        value=['show'],
                        className="checkbox"
                    )
                ], className="control-label"),
            ], className="control-group"),
            
            dcc.Graph(id="scatter-plot", className="chart-container"),
            
            html.Div([
                html.H4("Selected country:", className="selected-country-title"),
                html.Div(id="selected-country-info", className="selected-country-info")
            ], className="selected-country-container"),
            
        ], className="panel cluster-panel"),
        
        # Right column - ML Model Insights
        html.Div([
            html.H3("ML Model Insights", className="panel-title"),
            
            html.Div([
                html.H4("Model Performance Comparison", className="chart-title"),
                dcc.Graph(id="model-chart", className="chart-container small-chart"),
            ]),
            
            html.Div([
                html.H4("Feature Importance", className="chart-title"),
                dcc.Graph(id="feature-chart", className="chart-container small-chart"),
            ]),
            
            html.Div([
                html.H4("Democracy Score Trends (2017-2024)", className="chart-title"),
                dcc.Graph(id="trend-chart", className="chart-container"),
            ]),
            
        ], className="panel insights-panel"),
    ], className="dashboard-grid"),
    
    # Key Insights Panel
    html.Div([
        html.H3("Key Insights", className="panel-title"),
        html.Div([
            html.Div([
                html.H4("Unsupervised Discovery", className="insight-title",
                       style={'color': '#4CAF50'}),
                html.P("Machine learning algorithms naturally discovered regime patterns from raw data that closely match expert classifications (ARI = 0.78).", 
                      className="insight-text"),
            ], className="insight-card", style={'borderLeftColor': '#4CAF50'}),
            
            html.Div([
                html.H4("Critical Dimensions", className="insight-title",
                       style={'color': '#2196F3'}),
                html.P("Civil liberties (0.90) and electoral processes (0.86) emerged as the most powerful predictors of regime type in clustering analysis.", 
                      className="insight-text"),
            ], className="insight-card", style={'borderLeftColor': '#2196F3'}),
            
            html.Div([
                html.H4("Borderline Regimes", className="insight-title",
                       style={'color': '#FF5722'}),
                html.P("Countries like Hungary, Poland and Mexico occupy a statistical gray zone between flawed democracies and hybrid regimes, challenging discrete categorization.", 
                      className="insight-text"),
            ], className="insight-card", style={'borderLeftColor': '#FF5722'}),
        ], className="insights-grid"),
    ], className="insights-panel"),
    
    # Footer
    html.Footer([
        html.Div([
            html.P("Data source: Economist Intelligence Unit Democracy Index"),
            html.P("Compiled by Rosalina Torres as part of democracy clustering analysis project"),
            html.P("Â© 2025 | Northeastern University"),
        ], className="footer-content")
    ], className="footer"),
], className="dashboard-container")

# Callback to update country info
@callback(
    Output('country-info', 'children'),
    Output('country-info', 'style'),
    Input('country-selector', 'value')
)
def update_country_info(country):
    country_data = df[df['country'] == country].iloc[0]
    regime = country_data['category']
    score = country_data['democracy_index']
    color = regime_colors.get(regime, '#9E9E9E')
    
    # Determine if country is borderline
    is_borderline = country_data['is_borderline']
    
    # Calculate cluster probability (simplified)
    if is_borderline:
        cluster_prob = 0.51
    elif score > 8.5:
        cluster_prob = 0.95
    elif score > 7.5:
        cluster_prob = 0.80
    else:
        cluster_prob = 0.70
        
    # Generate probability message
    if is_borderline:
        prob_message = f"This country sits at the boundary between Flawed Democracy and Hybrid Regime with {int(cluster_prob*100)}% probability of being in its current classification."
    elif cluster_prob > 0.9:
        prob_message = f"Strong alignment with the {regime} cluster ({int(cluster_prob*100)}% probability)"
    elif cluster_prob > 0.7:
        prob_message = f"Good alignment with the {regime} cluster ({int(cluster_prob*100)}% probability)"
    else:
        prob_message = f"Moderate alignment with the {regime} cluster ({int(cluster_prob*100)}% probability)"
    
    # Border style for borderline countries
    border_style = '2px solid #FF5722' if is_borderline else 'none'
    
    # Return country info card and its style
    return html.Div([
        html.Div([
            html.H4(country, className="country-name", style={'color': color}),
            html.Span(f"{score:.2f}", className="country-score", style={'backgroundColor': color}),
        ], className="country-header"),
        html.Div([
            html.P([html.Strong("Regime Type: "), regime], className="regime-type"),
            html.P(prob_message, className="prob-message"),
        ], className="country-details"),
    ]), {'backgroundColor': f"rgba({int(color[1:3], 16)}, {int(color[3:5], 16)}, {int(color[5:7], 16)}, 0.1)", 
         'border': border_style}

# Callback to update dimension details
@callback(
    Output('dimension-details', 'children'),
    Input('country-selector', 'value')
)
def update_dimension_details(country):
    country_data = df[df['country'] == country].iloc[0]
    
    dimensions = [
        {'name': 'Electoral Process', 'value': country_data['electoral_process_and_pluralism']},
        {'name': 'Functioning of Government', 'value': country_data['functioning_of_government']},
        {'name': 'Political Participation', 'value': country_data['political_participation']},
        {'name': 'Political Culture', 'value': country_data['political_culture']},
        {'name': 'Civil Liberties', 'value': country_data['civil_liberties']}
    ]
    
    return html.Div([
        html.Div([
            html.Div(f"{dim['name']}: ", className="dimension-label"),
            html.Div(f"{dim['value']:.2f}", className="dimension-value"),
            html.Div(className="dimension-bar-container", children=[
                html.Div(className="dimension-bar", style={
                    'width': f"{dim['value'] * 10}%",
                    'backgroundColor': regime_colors[country_data['category']]
                })
            ])
        ], className="dimension-item") for dim in dimensions
    ])

# Callback to update radar chart
@callback(
    Output('radar-chart', 'figure'),
    Input('country-selector', 'value')
)
def update_radar_chart(country):
    country_data = df[df['country'] == country].iloc[0]
    regime = country_data['category']
    color = regime_colors.get(regime, '#9E9E9E')
    
    # Create radar chart data
    dimensions = ['electoral_process_and_pluralism', 'functioning_of_government', 
                  'political_participation', 'political_culture', 'civil_liberties']
    dimension_labels = ['Electoral Process', 'Functioning of Govt', 
                      'Political Participation', 'Political Culture', 'Civil Liberties']
    values = [country_data[dim] for dim in dimensions]
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=dimension_labels,
        fill='toself',
        name=country,
        line_color=color,
        fillcolor=f"rgba({int(color[1:3], 16)}, {int(color[3:5], 16)}, {int(color[5:7], 16)}, 0.2)"
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10]
            )
        ),
        showlegend=False,
        margin=dict(l=10, r=10, t=30, b=10),
    )
    
    return fig

# Callback to update scatter plot
@callback(
    Output('scatter-plot', 'figure'),
    Input('country-selector', 'value'),
    Input('show-clusters', 'value')
)
def update_scatter_plot(selected_country, show_clusters):
    # Create scatter plot
    fig = px.scatter(
        df,
        x='electoral_process_and_pluralism',
        y='civil_liberties',
        size='democracy_index',
        color='category',
        hover_name='country',
        size_max=15,
        color_discrete_map=regime_colors
    )
    
    # Update marker properties for better visualization
    fig.update_traces(marker=dict(
        line=dict(width=1, color='DarkSlateGrey')
    ))
    
    # Highlight selected country
    selected_point = df[df['country'] == selected_country]
    regime = selected_point['category'].iloc[0]
    is_borderline = selected_point['is_borderline'].iloc[0]
    
    highlight_color = '#FF5722' if is_borderline else 'black'
    highlight_width = 2
    
    fig.add_trace(
        go.Scatter(
            x=selected_point['electoral_process_and_pluralism'],
            y=selected_point['civil_liberties'],
            mode='markers',
            marker=dict(
                size=selected_point['democracy_index'] * 1.5,
                color='rgba(0,0,0,0)',
                line=dict(
                    color=highlight_color,
                    width=highlight_width
                )
            ),
            showlegend=False,
            hoverinfo='skip'
        )
    )
    
    # Add cluster boundaries if requested
    if show_clusters and 'show' in show_clusters:
        # Full Democracy threshold (8.01)
        fig.add_shape(type="line", x0=0, y0=8.01, x1=10, y1=8.01, 
                     line=dict(color=regime_colors['Full Democracy'], width=1, dash="dash"))
        fig.add_shape(type="line", x0=8.01, y0=0, x1=8.01, y1=10, 
                     line=dict(color=regime_colors['Full Democracy'], width=1, dash="dash"))
        
        # Flawed Democracy threshold (6.01)
        fig.add_shape(type="line", x0=0, y0=6.01, x1=10, y1=6.01, 
                     line=dict(color=regime_colors['Flawed Democracy'], width=1, dash="dash"))
        fig.add_shape(type="line", x0=6.01, y0=0, x1=6.01, y1=10, 
                     line=dict(color=regime_colors['Flawed Democracy'], width=1, dash="dash"))
        
        # Hybrid Regime threshold (4.01)
        fig.add_shape(type="line", x0=0, y0=4.01, x1=10, y1=4.01, 
                     line=dict(color=regime_colors['Hybrid Regime'], width=1, dash="dash"))
        fig.add_shape(type="line", x0=4.01, y0=0, x1=4.01, y1=10, 
                     line=dict(color=regime_colors['Hybrid Regime'], width=1, dash="dash"))
    
    # Update layout
    fig.update_layout(
        xaxis=dict(title="Electoral Process", range=[0, 10]),
        yaxis=dict(title="Civil Liberties", range=[0, 10]),
        legend_title="Regime Type",
        margin=dict(l=10, r=10, t=30, b=10),
    )
    
    return fig

# Callback to update selected country info
@callback(
    Output('selected-country-info', 'children'),
    Input('country-selector', 'value')
)
def update_selected_country_info(country):
    country_data = df[df['country'] == country].iloc[0]
    regime = country_data['category']
    score = country_data['democracy_index']
    color = regime_colors.get(regime, '#9E9E9E')
    
    return html.Div([
        html.Span(
            country, 
            style={'fontWeight': 'bold', 'color': color}
        ),
        html.Span(f" ({score:.2f}) - "),
        html.Span(regime, style={'color': color})
    ])

# Callback to update model performance chart
@callback(
    Output('model-chart', 'figure'),
    Input('country-selector', 'value')  # Dummy input to ensure callback registration
)
def update_model_chart(_):
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=model_performance['Algorithm'],
        y=model_performance['ARI'],
        name='Adj. Rand Index',
        marker_color='#8884d8'
    ))
    
    fig.add_trace(go.Bar(
        x=model_performance['Algorithm'],
        y=model_performance['Accuracy'],
        name='Accuracy',
        marker_color='#82ca9d'
    ))
    
    fig.update_layout(
        yaxis=dict(title="Score", range=[0, 1]),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
        margin=dict(l=10, r=10, t=10, b=50),
        barmode='group'
    )
    
    return fig

# Callback to update feature importance chart
@callback(
    Output('feature-chart', 'figure'),
    Input('country-selector', 'value')  # Dummy input to ensure callback registration
)
def update_feature_chart(_):
    # Sort features by importance
    sorted_features = feature_importance.sort_values('Importance', ascending=True)
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        y=sorted_features['Feature'],
        x=sorted_features['Importance'],
        orientation='h',
        marker_color='#FF5722',
        text=sorted_features['Importance'].apply(lambda x: f"{x:.2f}"),
        textposition='auto'
    ))
    
    fig.update_layout(
        xaxis=dict(title="Importance", range=[0, 1]),
        yaxis=dict(title=""),
        margin=dict(l=10, r=10, t=10, b=10),
    )
    
    return fig

# Callback to update trend chart
@callback(
    Output('trend-chart', 'figure'),
    Input('country-selector', 'value')
)
def update_trend_chart(selected_country):
    fig = go.Figure()
    
    # Add Norway
    fig.add_trace(go.Scatter(
        x=years, y=yearly_trends['Norway'],
        mode='lines+markers',
        name='Norway',
        line=dict(color=regime_colors['Full Democracy'], width=2)
    ))
    
    # Add US
    fig.add_trace(go.Scatter(
        x=years, y=yearly_trends['United States'],
        mode='lines+markers',
        name='United States',
        line=dict(color=regime_colors['Flawed Democracy'], width=2)
    ))
    
    # Add selected country if it's not Norway or US and is in yearly_trends
    if selected_country != 'Norway' and selected_country != 'United States' and selected_country in yearly_trends:
        fig.add_trace(go.Scatter(
            x=years, y=yearly_trends[selected_country],
            mode='lines+markers',
            name=selected_country,
            line=dict(color='#9C27B0', width=2)
        ))
    
    # Add borderline countries as dashed lines
    for country in borderline_countries:
        if country in yearly_trends and country != selected_country:
            fig.add_trace(go.Scatter(
                x=years, y=yearly_trends[country],
                mode='lines',
                name=country,
                line=dict(color='#FF5722', width=1, dash='dash')
            ))
    
    # Add threshold reference lines
    fig.add_shape(type="line", x0=2017, y0=8.01, x1=2024, y1=8.01, 
                 line=dict(color=regime_colors['Full Democracy'], width=1, dash="dash"))
    fig.add_shape(type="line", x0=2017, y0=6.01, x1=2024, y1=6.01, 
                 line=dict(color=regime_colors['Flawed Democracy'], width=1, dash="dash"))
    fig.add_shape(type="line", x0=2017, y0=4.01, x1=2024, y1=4.01, 
                 line=dict(color=regime_colors['Hybrid Regime'], width=1, dash="dash"))
    
    # Update layout
    fig.update_layout(
        xaxis=dict(title="Year"),
        yaxis=dict(title="Democracy Score", range=[4, 10]),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
        margin=dict(l=10, r=10, t=10, b=10),
    )
    
    return fig

if __name__ == '__main__':
    app.run(debug=True)import dash
from dash import dcc, html
import plotly.express as px
import pandas as pd
import numpy as np

# Initialize the app
app = dash.Dash(__name__, 
                meta_tags=[{"name": "viewport", "content": "width=device-width, initial-scale=1"}])
server = app.server  # for deployment

# Define regime type colors
regime_colors = {
    'Full Democracy': '#4CAF50',
    'Flawed Democracy': '#2196F3',
    'Hybrid Regime': '#FFC107',
    'Authoritarian': '#F44336'
}

# App layout
app.layout = html.Div([
    # Header
    html.Div([
        html.H1("Democracy Index Clustering Analysis", className="header-title"),
        html.H2("Machine Learning Discovers Political Regime Patterns", className="header-subtitle"),
        html.Div([
            html.Div("By: Rosalina Torres, Northeastern University, MS Candidate, Data Analytics Engineering", 
                     className="header-author"),
            html.Div("Data: The Economist Intelligence Unit Democracy Index", 
                     className="header-data-source"),
        ], className="header-info"),
    ], className="header"),
    
    # Placeholder for dashboard content
    html.Div([
        html.H3("Dashboard under construction", className="text-center"),
        html.P("The interactive dashboard will be available soon!", className="text-center")
    ], className="under-construction"),
    
    # Footer
    html.Footer([
        html.Div([
            html.P("Data source: Economist Intelligence Unit Democracy Index"),
            html.P("Compiled by Rosalina Torres as part of democracy clustering analysis project"),
            html.P("Â© 2025 | Northeastern University"),
        ], className="footer-content")
    ], className="footer"),
], className="dashboard-container")/* Main Container */
.dashboard-container {
    font-family: 'Roboto', sans-serif;
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5f7fa;
    color: #333;
}

/* Header */
.header {
    text-align: center;
    margin-bottom: 20px;
}

.header-title {
    color: #1e3a8a;
    font-size: 28px;
    font-weight: 700;
    margin-bottom: 5px;
}

.header-subtitle {
    color: #64748b;
    font-size: 18px;
    font-weight: 400;
    margin-bottom: 15px;
}

.header-info {
    display: flex;
    justify-content: space-between;
    font-size: 14px;
    margin-top: 10px;
}

.header-author {
    color: #475569;
    font-weight: 500;
}

.header-data-source {
    color: #64748b;
}

/* Dashboard Grid */
.dashboard-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
}

/* Panels */
.panel {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    padding: 15px;
}

.panel-title {
    color: #2563eb;
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 15px;
}

/* Controls */
.control-group {
    margin-bottom: 15px;
}

.control-label {
    font-size: 14px;
    font-weight: 500;
    color: #475569;
    margin-bottom: 5px;
    display: block;
}

.dropdown .Select-control {
    border-color: #e2e8f0;
}

.dropdown .Select-control:hover {
    border-color: #cbd5e1;
}

.checkbox {
    font-size: 14px;
}

/* Country Info Card */
.country-info-card {
    margin-bottom: 15px;
    padding: 12px;
    border-radius: 6px;
}

.country-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.country-name {
    font-size: 18px;
    font-weight: 600;
    margin: 0;
}

.country-score {
    padding: 2px 8px;
    border-radius: 4px;
    color: white;
    font-size: 13px;
    font-weight: 500;
}

.country-details {
    font-size: 13px;
}

.regime-type {
    margin-bottom: 4px;
}

.prob-message {
    font-style: italic;
    color: #64748b;
    margin: 0;
}

/* Dimension Details */
.dimension-container {
    margin-top: 15px;
    background-color: #f8fafc;
    border-radius: 6px;
    padding: 10px;
}

.dimension-title {
    font-size: 14px;
    font-weight: 500;
    color: #475569;
    margin-bottom: 10px;
}

.dimension-item {
    display: grid;
    grid-template-columns: 45% 15% 40%;
    align-items: center;
    margin-bottom: 6px;
}

.dimension-label {
    font-size: 12px;
    color: #475569;
}

.dimension-value {
    font-size: 12px;
    font-weight: 500;
    color: #334155;
}

.dimension-bar-container {
    height: 8px;
    background-color: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
}

.dimension-bar {
    height: 100%;
    border-radius: 4px;
}

/* Selected Country Info */
.selected-country-container {
    margin-top: 10px;
    text-align: center;
}

.selected-country-title {
    font-size: 14px;
    font-weight: 500;
    color: #475569;
    margin-bottom: 5px;
}

.selected-country-info {
    font-size: 14px;
}

/* Charts */
.chart-container {
    height: 300px;
    width: 100%;
}

.small-chart {
    height: 180px;
}

.chart-title {
    font-size: 14px;
    font-weight: 500;
    color: #475569;
    margin-bottom: 10px;
}

/* Insights Panel */
.insights-panel {
    background-color: #e6f2ff;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
}

.insights-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
}

.insight-card {
    background-color: white;
    padding: 12px;
    border-radius: 6px;
    border-left: 4px solid;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.insight-title {
    font-size: 15px;
    font-weight: 600;
    margin-bottom: 8px;
}

.insight-text {
    font-size: 13px;
    color: #475569;
    margin: 0;
}

/* Footer */
.footer {
    text-align: center;
    margin-top: 20px;
    font-size: 12px;
    color: #64748b;
}

.footer-content p {
    margin: 2px 0;
}

/* Responsive Adjustments */
@media (max-width: 1200px) {
    .dashboard-grid {
        grid-template-columns: 1fr 1fr;
    }
    
    .insights-grid {
        grid-template-columns: 1fr 1fr;
    }
    
    .panel:last-child {
        grid-column: span 2;
    }
}

@media (max-width: 800px) {
    .dashboard-grid {
        grid-template-columns: 1fr;
    }
    
    .insights-grid {
        grid-template-columns: 1fr;
    }
    
    .panel:last-child {
        grid-column: auto;
    }
    
    .header-info {
        flex-direction: column;
        gap: 5px;
        align-items: center;
    }
}

if __name__ == '__main__':
    app.run(debug=True)    
